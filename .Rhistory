print(data_weighted_countries)
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
print(country)
data_weighted_countries[length(data_weighted_countries)+1] <- data.frame(language = country$language,
country = country$country,
trade = country$trade,
distance = country$distance,
users = twitter_weight)
}
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
print(country)
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
countries_weighted <- do.call(rbind, data_weighted_countries)
View(countries_weighted)
for (i in 1:nrow(countries_capitals_trade)) {
countries_capitals_trade[i, "exports"] <- format(round(countries_capitals_trade[i, "exports"], 3), nsmall = 3)
countries_capitals_trade[i, "imports"] <- format(round(countries_capitals_trade[i, "imports"], 3), nsmall = 3)
}
for (i in 1:nrow(countries_capitals_trade)) {
countries_capitals_trade[i, "exports"] <- format(round(as.numeric(countries_capitals_trade[i, "exports"]), 3), nsmall = 3)
countries_capitals_trade[i, "imports"] <- format(round(as.numeric(countries_capitals_trade[i, "imports"]), 3), nsmall = 3)
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
countries_weighted <- do.call(rbind, data_weighted_countries)
sum(countries_weighted[countries_weighted$language == "en", ]$trade)
sum(countries_weighted[countries_weighted$language == "ge", ]$trade)
sum(countries_weighted[countries_weighted$language == "fr", ]$trade)
sum(countries_weighted[countries_weighted$language == "ar", ]$trade)
sum(countries_weighted[countries_weighted$language == "ko", ]$trade)
sum(countries_weighted[countries_weighted$language == "uk", ]$trade)
sum(countries_weighted[countries_weighted$language == "ru", ]$trade)
sum(countries_weighted[countries_weighted$language == "pt", ]$trade)
sum(countries_weighted[countries_weighted$language == "pt", ]$distance)
sum(countries_weighted[countries_weighted$language == "ge", ]$distance)
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
if(country$language == "ge") {
print(twitter_weight)
}
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
if(country$country == "Germany") {
print(twitter_weight)
}
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
print(country$country)
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
language <- country$language
if(language == "ge") {
print(twitter_weight)
}
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance,
twitter_weight = 0)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
country$twitter_weight <- twitter_weight
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
countries_weighted <- do.call(rbind, data_weighted_countries)
View(countries_weighted)
countries_weighted <- null
countries_weighted <- NA
data_weighted_countries <- list()
for (l in languages_groups) {
countries_by_language <- countries_capitals_and_more[countries_capitals_and_more$language == l, ]
language_trade <- sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$exports)) +
sum(as.numeric(countries_capitals_trade[countries_capitals_trade$language == l, ]$imports))
language_twitter_users <- sum(countries_twitter_users[countries_twitter_users$language == l, ]$users)
language_distance <- sum(countries_distances[countries_distances$language == l, ]$distance)
for (i in 1:nrow(countries_by_language)) {
if(nrow(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]) > 0 &&
nrow(countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]) > 0) {
country <- data.frame(language = countries_by_language[i, "language"],
country = countries_by_language[i, "country"],
iso2 = countries_by_language[i, "iso2"],
capital = countries_by_language[i, "capital"],
trade = (as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$exports) +
as.numeric(countries_capitals_trade[countries_capitals_trade$country == countries_by_language[i, "country", ], ]$imports)),
users = countries_twitter_users[countries_twitter_users$country == countries_by_language[i, "country", ], ]$users,
distance = countries_distances[countries_distances$country == countries_by_language[i, "country", ], ]$distance,
twitter_weight = 0)
twitter_weight <- 1/as.numeric(language_twitter_users)*as.numeric(country$users)
country$twitter_weight <- twitter_weight
country$trade <- as.numeric(country$trade)*twitter_weight
country$distance <- as.numeric(country$distance)*twitter_weight
data_weighted_countries[[length(data_weighted_countries)+1]] <- country
}
}
}
countries_weighted <- do.call(rbind, data_weighted_countries)
View(countries_weighted)
countries_weighted[!duplicated(countries_weighted)]
distinct(countries_weighted, countries_weighted$language, countries_weighted$country, .keep_all = TRUE)
countries_weighted <- distinct(countries_weighted, countries_weighted$language, countries_weighted$country, .keep_all = TRUE)
sum(countries_weighted[countries_weighted$language == "ge", ]$distance)
sum(countries_weighted[countries_weighted$language == "ge", ]$trade)
languages_groups <- c("en", "ge", "ru", "uk", "es", "pt", "fr", "ar", "id", "ko")
languages_groups <- c("en", "ge", "ru", "uk", "es", "pt", "fr", "ar", "id", "ko")
data_language_groups <- list()
for (l in languages_groups) {
data_language_groups[[length(data_language_groups)+1]] <- data.frame(language = l,
distance = sum(countries_weighted[countries_weighted$language == l, ]$distance),
trade = sum(countries_weighted[countries_weighted$language == l, ]$trade))
}
final_language_table <- do.call(rbind, data_language_groups)
View(final_language_table)
trade_plot <- ggplot2(data = final_language_table, aes(x = final_language_table$language, y = final_language_table$trade)) + geom_bar()
library("ggplot2")
trade_plot <- ggplot2(data = final_language_table, aes(x = final_language_table$language, y = final_language_table$trade)) + geom_bar()
trade_plot <- ggplot(data = final_language_table, aes(x = final_language_table$language, y = final_language_table$trade)) + geom_bar()
View(trade_plot)
trade_plot
trade_plot <- ggplot(data = final_language_table, aes(x = language, y = trade)) + geom_bar()
trade_plot
trade_plot <- ggplot(data = final_language_table, aes(x = language, y = trade)) + geom_bar(stat = "identity")
trade_plot
distance_plot <- ggplot(data = final_language_table, aes(x = language, y = distance)) + geom_bar(stat = "identity")
distance_plot
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
library("rjson")
library("lemon")
knit_print.data.frame <- lemon_print
source("code/JSON_handler.R")
source("code/plotter.R")
hedonometer_data
### Weighted Distances of Language-Groups:
```{r}
distance_plot
```
### Weighted Trade-Volume of Language-Groups:
```{r}
trade_plot
library(rmarkdown)
render_site
render_site()
write.csv(final_language_table, "data/final_language_data")
data_language_final <- read.csv("data/final_language_data")
trade_plot <- ggplot(data = data_language_final, aes(x = language, y = trade)) + geom_bar(stat = "identity")
distance_plot <- ggplot(data = data_language_final, aes(x = language, y = distance)) + geom_bar(stat = "identity")
trade_plot
final_plot
distance_plot
trade_plot
standardizeHedonData <- function(hedon_data, lang) {
#first_day <- hedon_data[1, "happiness"]
for (i in 1:nrow(hedon_data)) {
hedon_data[i, "happiness"] <- hedon_data[i, "happiness"] - hedonometer_data[hedonometer_data$language == lang, ]$baseline_mean
}
return(hedon_data)
}
library("rjson")
library("ggplot2")
source("code/JSON_handler.R")
source("code/plotter.R")
# German
de_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-02-24&limit=30")
de_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-01-24&limit=31")
data_de_habit <- function.createHedonDataFrame(de_habit_json)
data_de_habit <- standardizeHedonData(data_de_habit, "de")
data_de_base <- function.createHedonDataFrame(de_base_json)
# English
en_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=en_all&date__gte=2022-02-24&limit=30")
en_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=en_all&date__gte=2022-01-24&limit=31")
data_en_habit <- function.createHedonDataFrame(en_habit_json)
data_en_habit <- standardizeHedonData(data_en_habit, "en")
data_en_base <- function.createHedonDataFrame(en_base_json)
# Russian
ru_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ru_all&date__gte=2022-02-24&limit=30")
ru_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ru_all&date__gte=2022-01-24&limit=31")
data_ru_habit <- function.createHedonDataFrame(ru_habit_json)
data_ru_habit <- standardizeHedonData(data_ru_habit, "ru")
data_ru_base <- function.createHedonDataFrame(ru_base_json)
# Ukrainian
uk_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=uk_all&date__gte=2022-02-24&limit=30")
uk_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=uk_all&date__gte=2022-01-24&limit=31")
data_uk_habit <- function.createHedonDataFrame(uk_habit_json)
data_uk_habit <- standardizeHedonData(data_uk_habit, "uk")
data_uk_base <- function.createHedonDataFrame(uk_base_json)
# Spanish
es_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=es_all&date__gte=2022-02-24&limit=30")
es_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=es_all&date__gte=2022-01-24&limit=31")
data_es_habit <- function.createHedonDataFrame(es_habit_json)
data_es_habit <- standardizeHedonData(data_es_habit, "es")
data_es_base <- function.createHedonDataFrame(es_base_json)
# Korean
ko_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ko_all&date__gte=2022-02-24&limit=30")
ko_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ko_all&date__gte=2022-01-24&limit=31")
data_ko_habit <- function.createHedonDataFrame(ko_habit_json)
data_ko_habit <- standardizeHedonData(data_ko_habit, "ko")
data_ko_base <- function.createHedonDataFrame(ko_base_json)
# Indonesian
id_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=id_all&date__gte=2022-02-24&limit=30")
id_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=id_all&date__gte=2022-01-24&limit=31")
data_id_habit <- function.createHedonDataFrame(id_habit_json)
data_id_habit <- standardizeHedonData(data_id_habit, "id")
data_id_base <- function.createHedonDataFrame(id_base_json)
# Portuguese
pt_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=pt_all&date__gte=2022-02-24&limit=30")
pt_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=pt_all&date__gte=2022-01-24&limit=31")
data_pt_habit <- function.createHedonDataFrame(pt_habit_json)
data_pt_habit <- standardizeHedonData(data_pt_habit, "pt")
data_pt_base <- function.createHedonDataFrame(pt_base_json)
# Arabic
ar_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ar_all&date__gte=2022-02-24&limit=30")
ar_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ar_all&date__gte=2022-01-24&limit=31")
data_ar_habit <- function.createHedonDataFrame(ar_habit_json)
data_ar_habit <- standardizeHedonData(data_ar_habit, "ar")
data_ar_base <- function.createHedonDataFrame(ar_base_json)
# French
fr_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=fr_all&date__gte=2022-02-24&limit=30")
fr_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=fr_all&date__gte=2022-01-24&limit=31")
data_fr_habit <- function.createHedonDataFrame(fr_habit_json)
data_fr_habit <- standardizeHedonData(data_fr_habit, "fr")
data_fr_base <- function.createHedonDataFrame(fr_base_json)
final_plot <- ggplot() +
geom_ma(data = data_de_habit, aes(x = data_de_habit$date, y = data_de_habit$happiness), color = "red") +
geom_line(data = data_en_habit, aes(x = data_en_habit$date, y = data_en_habit$happiness), color = "green") +
geom_line(data = data_es_habit, aes(x = data_es_habit$date, y = data_es_habit$happiness), color = "#2980B9") +
geom_line(data = data_ru_habit, aes(x = data_ru_habit$date, y = data_ru_habit$happiness), color = "blue") +
geom_line(data = data_uk_habit, aes(x = data_uk_habit$date, y = data_uk_habit$happiness), color = "yellow") +
geom_line(data = data_pt_habit, aes(x = data_pt_habit$date, y = data_pt_habit$happiness), color = "#F1C40F") +
geom_line(data = data_id_habit, aes(x = data_id_habit$date, y = data_id_habit$happiness), color = "#F39C12") +
geom_line(data = data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black") +
geom_line(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400") +
geom_line(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E") +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
final_plot <- ggplot() +
geom_line(data = data_de_habit, aes(x = data_de_habit$date, y = data_de_habit$happiness), color = "red") +
geom_line(data = data_en_habit, aes(x = data_en_habit$date, y = data_en_habit$happiness), color = "green") +
geom_line(data = data_es_habit, aes(x = data_es_habit$date, y = data_es_habit$happiness), color = "#2980B9") +
geom_line(data = data_ru_habit, aes(x = data_ru_habit$date, y = data_ru_habit$happiness), color = "blue") +
geom_line(data = data_uk_habit, aes(x = data_uk_habit$date, y = data_uk_habit$happiness), color = "yellow") +
geom_line(data = data_pt_habit, aes(x = data_pt_habit$date, y = data_pt_habit$happiness), color = "#F1C40F") +
geom_line(data = data_id_habit, aes(x = data_id_habit$date, y = data_id_habit$happiness), color = "#F39C12") +
geom_line(data = data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black") +
geom_line(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400") +
geom_line(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E") +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
final_plot
final_plot <- ggplot() +
geom_smooth(data = data_de_habit, aes(x = data_de_habit$date, y = data_de_habit$happiness), color = "red") +
geom_smooth(data = data_en_habit, aes(x = data_en_habit$date, y = data_en_habit$happiness), color = "green") +
geom_smooth(data = data_es_habit, aes(x = data_es_habit$date, y = data_es_habit$happiness), color = "#2980B9") +
geom_smooth(data = data_ru_habit, aes(x = data_ru_habit$date, y = data_ru_habit$happiness), color = "blue") +
geom_smooth(data = data_uk_habit, aes(x = data_uk_habit$date, y = data_uk_habit$happiness), color = "yellow") +
geom_smooth(data = data_pt_habit, aes(x = data_pt_habit$date, y = data_pt_habit$happiness), color = "#F1C40F") +
geom_smooth(data = data_id_habit, aes(x = data_id_habit$date, y = data_id_habit$happiness), color = "#F39C12") +
geom_smooth(data = data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black") +
geom_smooth(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400") +
geom_smooth(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E") +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
final_plot
final_plot <- ggplot() +
geom_smooth(data = data_de_habit, aes(x = data_de_habit$date, y = data_de_habit$happiness), color = "red", se = FALSE) +
geom_smooth(data = data_en_habit, aes(x = data_en_habit$date, y = data_en_habit$happiness), color = "green", se = FALSE) +
geom_smooth(data = data_es_habit, aes(x = data_es_habit$date, y = data_es_habit$happiness), color = "#2980B9", se = FALSE) +
geom_smooth(data = data_ru_habit, aes(x = data_ru_habit$date, y = data_ru_habit$happiness), color = "blue", se = FALSE) +
geom_smooth(data = data_uk_habit, aes(x = data_uk_habit$date, y = data_uk_habit$happiness), color = "yellow", se = FALSE) +
geom_smooth(data = data_pt_habit, aes(x = data_pt_habit$date, y = data_pt_habit$happiness), color = "#F1C40F", se = FALSE) +
geom_smooth(data = data_id_habit, aes(x = data_id_habit$date, y = data_id_habit$happiness), color = "#F39C12", se = FALSE) +
geom_smooth(data = data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black", se = FALSE) +
geom_smooth(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400", se = FALSE) +
geom_smooth(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E", se = FALSE) +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
final_plot
final_plot
final_plot <- ggplot() +
geom_smooth(data = data_de_habit, aes(x = date, y = happiness), color = "red", se = FALSE) +
geom_smooth(data = data_en_habit, aes(x = date, y = happiness), color = "green", se = FALSE) +
geom_smooth(data = data_es_habit, aes(x = date, y = happiness), color = "#2980B9", se = FALSE) +
geom_smooth(data = data_ru_habit, aes(x = date, y = happiness), color = "blue", se = FALSE) +
geom_smooth(data = data_uk_habit, aes(x = date, y = happiness), color = "yellow", se = FALSE) +
geom_smooth(data = data_pt_habit, aes(x = date, y = happiness), color = "#F1C40F", se = FALSE) +
geom_smooth(data = data_id_habit, aes(x = date, y = happiness), color = "#F39C12", se = FALSE) +
geom_smooth(data = data_fr_habit, aes(x = date, y = happiness), color = "black", se = FALSE) +
geom_smooth(data = data_ko_habit, aes(x = date, y = happiness), color = "#D35400", se = FALSE) +
geom_smooth(data = data_ar_habit, aes(x = date, y = happiness), color = "#34495E", se = FALSE) +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
final_plot
render_site()
