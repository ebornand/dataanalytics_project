DOT_2021Q1 <- fromJSON(file = "http://dataservices.imf.org/REST/SDMX_JSON.svc/DataStructure/DOT_2021Q1")
DOT_2021Q1
imf_codes()
imf_codes("DOT")
export_uk_de <- imf_ids(database_id = "DOT", country = c("UA", "DE"), return_raw = FALSE, time = 3)
export_uk_de <- imf_ids(database_id = "DOT_2021Q1", country = c("UA", "DE"), return_raw = FALSE, time = 3)
export_uk_de <- imf_ids(database_id = "DOT_2021Q1", country = c("UA", "DE"), return_raw = FALSE, times = 3)
export_uk_de <- imf_ids(database_id = "DOT_2021Q1", country = c("DE"), return_raw = FALSE, times = 3)
export_uk_de <- imf_ids(database_id = "DOT_2021Q1", return_raw = FALSE, times = 3)
export_uk_de <- imf_ids(return_raw = FALSE, times = 3)
View(DOT_2021Q1)
export_uk_de <- imf_data(database_id = "DOT", country = c("UA", "DE"), return_raw = FALSE, times = 3)
export_uk_de <- imf_data(database_id = "DOT", country = c("UA", "DE"), indicator = "EREER_IX",return_raw = FALSE, times = 3)
export_uk_de <- imf_data(database_id = "DOT_2021Q1", country = c("UA", "DE"), indicator = "EREER_IX",return_raw = FALSE, times = 3)
export_uk_de <- imf_data(database_id = "DOT", country = c("UA", "DE"), indicator = "TXG_FOB_USD", return_raw = TRUE, times = 3)
data <- export_uk_de
data$CompactData$DataSet$Series
data_df <- data$CompactData$DataSet$Series
names(data_df)
View(data_df)
View(data_df[[7]][[1]])
imf_data?
?imf_Data$
?imf_Data
??imd_data
??imf_data
imf_codelist(database_id = "DOT". return_raw = FALSE, times = 3)
imf_codelist(database_id = "DOT", return_raw = FALSE, times = 3)
imf_codes(codelist = "CL_INDICATOR_DOT")
#exports from Ukraine to Germany:
export_FOB_Ukr$CompactData$DataSet$Series
export_FOB_Ukr <- imf_data(database_id = "DOT", country = "UA", indicator = "TXG_FOB_USD", return_raw = TRUE, times = 3)
import_CIF_Ukr <- imf_data(database_id = "DOT", country = "UA", indicator = "TMG_CIF_USD", return_raw = TRUE, times = 3)
trade_balance_Ukr <- imf_data(database_id = "DOT", country = "UA", indicator = "TBG_USD", return_raw = TRUE, times = 3)
#exports from Ukraine to Germany:
wtf <- export_FOB_Ukr$CompactData$DataSet$Series
wtf
View(wtf)
View(wtf)
names(wtf)
?wtf$@FREQ
?wtf$`@FREQ`
??wtf$`@FREQ`
??wtf$@FREQ
wtf$`@FREQ`
exports_ukr <- export_FOB_Ukr$CompactData$DataSet$Series
imports_ukr <- import_CIF_Ukr$CompactData$DataSet$Series
tb_ukr <- trade_balance_Ukr$CompactData$DataSet$Series
exports_ukr_de <- exports_ukr[exports_ukr$`@COUNTERPART_AREA` == "DE"]
exports_ukr_de <- exports_ukr[exports_ukr$COUNTERPART_AREA == "DE"]
exports_ukr$COUNTERPART_AREA
colnames(exports_ukr) <- c("frequency", "ref_area", "indicator", "counterpart_area", "unit_mult", "time_format", "obs")
names(export_ukr)
names(exports$_ukr)
names(exports_ukr)
names(imports_ukr)
names(tb_ukr)
colnames(exports_ukr) <- c("frequency", "ref_area", "indicator", "counterpart_area", "unit_mult", "time_format", "obs")
colnames(imports_ukr) <- c("frequency", "ref_area", "indicator", "counterpart_area", "unit_mult", "time_format", "obs")
colnames(tb_ukr) <- c("frequency", "ref_area", "indicator", "counterpart_area", "unit_mult", "time_format", "obs")
exports_ukr_de <- exports_ukr[exports_ukr$counterpart_area == "DE"]
View(export_uk_de)
View(exports_ukr)
exports_ukr$counterpart_area
exports_ukr_de <- exports_ukr[exports_ukr$counterpart_area == "DE"]
exports_ukr_de <- exports_ukr[exports_ukr$counterpart_area == "DE",]
exports_ukr_de
View(exports_ukr_de)
View(exports_ukr_de[[7]][[481]])
View(exports_ukr_de[[7]][[481]])
install.packages("dplyr")
library("dplyr")
exports_ukr_de <- filter(exports_ukr, counterpart_area == "DE" & time_format == "A")
exports_ukr_de
View(exports_ukr)
exports_ukr_de <- filter(exports_ukr, counterpart_area == "DE" & frequency == "A")
exports_ukr_de
exports_ukr_de$obs
install.packages("ggmap")
library("ggmap")
# calculate distance between two place names
arena_dist <- mapdist(from = "Madison Square Garden New York, NY", to = "The Palace of Auburn Hills Auburn Hills, MI")
# output distance in miles
arena_dist$miles
# output "distance" in minutes
arena_dist$minutes
?register_google
showing_key()
ggmap_show_api_key()
ggmap_hide_api_key()
library("rjson")
df_distance <- fromJSON(file = "https://api.distancematrix.ai/maps/api/distancematrix/json?origins=Kiew&destinations=London&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB")
df_distance
View(df_distance)
df_distance <- fromJSON(file = "https://api.distancematrix.ai/maps/api/distancematrix/json?origins=Kiew, Ukraine&destinations=London, United Kigndom&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB")
df_distance <- fromJSON(file = "https://api.distancematrix.ai/maps/api/distancematrix/json?origins=Kiew, Ukraine&destinations=London, United Kigndom&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB")
df_geocode <- fromJSON(file = "https://api.myptv.com/geocoding/v1/locations/by-text?searchText=Kiew&apiKey=NTA1NjJmNjQ4MGNkNDc0MmFlM2IzMjJiZGM3ZDI1ZjU6MGM1NzUyZTgtMzE3ZC00Nzg0LWJiODQtMTY5OGJkNzQxYTlj")
df_geocode
View(df_geocode)
df_geocode$locations$referenceposition
df_geocode$locations[1]$referenceposition
df_geocode$locations
df_geocode$locations[1]
names(df_geocode$locations[1])
names(df_geocode$locations)
df_geocode_location <- df_geocode$locations[1]
df_geocode_location
View(df_geocode)
coordinates_kiew <- c(df_geocode$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
coordinates_kiew <- c(df_geocode$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
df_geocode_kiew <- fromJSON(file = "https://api.myptv.com/geocoding/v1/locations/by-text?searchText=Kiew&apiKey=NTA1NjJmNjQ4MGNkNDc0MmFlM2IzMjJiZGM3ZDI1ZjU6MGM1NzUyZTgtMzE3ZC00Nzg0LWJiODQtMTY5OGJkNzQxYTlj")
df_geocode_berlin <- fromJSON(file = "https://api.myptv.com/geocoding/v1/locations/by-text?searchText=Berlin&apiKey=NTA1NjJmNjQ4MGNkNDc0MmFlM2IzMjJiZGM3ZDI1ZjU6MGM1NzUyZTgtMzE3ZC00Nzg0LWJiODQtMTY5OGJkNzQxYTlj")
coordinates_kiew <- c(df_geocode_kiew$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
coordinates_kiew <- c(df_geocode_berlin$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
coordinates_kiew[1]
coordinates_kiew[2]
coordinates_kiew[0]
coordinates_berlin <- c(df_geocode_berlin$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
coordinates_kiew <- c(df_geocode_kiew$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
df_distance <- fromJSON(file = "https://api.distancematrix.ai/maps/api/distancematrix/json?origins=" + coordinates_kiew[1] + ", " + coordinates_kiew[2] + "&destinations=" + coordinates_berlin[1] + ", " + coordinates_berlin[2] + "&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB")
df_distance <- fromJSON(file = cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=',coordinates_kiew[1],', ',coordinates_kiew[2],'&destinations=',coordinates_berlin[1],', ',coordinates_berlin[2],'&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB'))
df_distance <- fromJSON(file = cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=',coordinates_kiew[1],', ',coordinates_kiew[2],'&destinations=',coordinates_berlin[1],', ',coordinates_berlin[2],'&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB',))
url <- cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=',coordinates_kiew[1], ', ',coordinates_kiew[2],'&destinations=',coordinates_berlin[1],', ',coordinates_berlin[2],'&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB')
url
url <- cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=', coordinates_kiew[1], ', ', coordinates_kiew[2], '&destinations=', coordinates_berlin[1], ', ', coordinates_berlin[2], '&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB')
url
url_test
url_test <- cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=', coordinates_kiew[1], ', ', coordinates_kiew[2], '&destinations=', coordinates_berlin[1], ', ', coordinates_berlin[2], '&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB')
url_test
?cat
url_test <- capture.output(cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=', coordinates_kiew[1], ', ', coordinates_kiew[2], '&destinations=', coordinates_berlin[1], ', ', coordinates_berlin[2], '&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB'))
url_test
url_test <- capture.output(cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=', coordinates_kiew[1], ',', coordinates_kiew[2], '&destinations=', coordinates_berlin[1], ',', coordinates_berlin[2], '&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB'))
url_test
url_test <- capture.output(cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=',coordinates_kiew[1],',',coordinates_kiew[2],'&destinations=',coordinates_berlin[1],',',coordinates_berlin[2],'&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB'))
url_test
df_distance <- fromJSON(file = url_test)
url_test
url_test <- capture.output(cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=',coordinates_kiew[1],',',coordinates_kiew[2],'&destinations=',coordinates_berlin[1],',',coordinates_berlin[2],'&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB', sep = ""))
url_test
df_distance <- fromJSON(file = url_test)
df_distance
coordinates_berlin <- c(df_geocode_berlin$locations[[1]]$referencePosition$latitude, df_geocode$locations[[1]]$referencePosition$longitude)
coordinates_kiew <- c(df_geocode_kiew$locations[[1]]$referencePosition$latitude, df_geocode_kiew$locations[[1]]$referencePosition$longitude)
coordinates_berlin <- c(df_geocode_berlin$locations[[1]]$referencePosition$latitude, df_geocode_berlin$locations[[1]]$referencePosition$longitude)
url_test <- capture.output(cat('https://api.distancematrix.ai/maps/api/distancematrix/json?origins=',coordinates_kiew[1],',',coordinates_kiew[2],'&destinations=',coordinates_berlin[1],',',coordinates_berlin[2],'&key=PLYEuZwg3IgiJPUOvpIS91prJ7jLB', sep = ""))
df_distance <- fromJSON(file = url_test)
df_distance
countries_capitals <- fromJSON(file = "https://countriesnow.space/api/v0.1/countries/capital")
View(countries_capitals)
countries_capitals <- countries_capitals$data
View(countries_capitals)
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
install.packages("rjson")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
library("rjson")
library("ggplot2")
source("code/JSON_handler.R")
source("code/plotter.R")
de_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-02-24&limit=1000")
de_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-01-24&limit=31")
data_de_habit <- function.createHedonDataFrame(de_habit_json)
data_de_base <- function.createHedonDataFrame(de_base_json)
#creating a plot for the german language
plot_de_habit <- function.basic_plot(data_de_habit)
plot_de_base <- function.basic_plot(data_de_base)
hedonometer_data
hedonometer_data <- data.frame(data_language, data_baseline_mean, data_baseline_sd, data_reactivity, data_habituation)
install.packages("rjson")
library("rjson")
source("code/JSON_handler.R")
languages_iso2 <- c("en", "de", "ru", "es", "pt", "fr", "ar", "id", "ko")
data_hedon_total <- list()
for (l in languages_iso2) {
habit_json_data <- fromJSON(file = capture.output(cat("http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=",
l, "_all&date__gte=2022-02-24&limit=1000", sep = "")))
base_json_data <- fromJSON(file = capture.output(cat("http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=",
l, "_all&date__gte=2022-01-24&limit=31", sep = "")))
base_data <- function.createHedonDataFrame(base_json_data)
habit_data <- function.createHedonDataFrame(habit_json_data)
data_hedon_total[[length(data_hedon_total)+1]] <- list(l, base_data, habit_data)
}
#creating final data frame
data_language <- c()
data_baseline_mean <- c()
data_baseline_sd <- c()
data_reactivity <- c()
data_habituation <- c()
for (d in data_hedon_total) {
language <- d[[1]]
base <- d[[2]]
habit <- d[[3]]
data_language <- append(data_language, language)
data_baseline_mean <- append(data_baseline_mean, mean(base$happiness))
data_baseline_sd <- append(data_baseline_sd, sd(base$happiness))
data_reactivity <- append(data_reactivity, (mean(base$happiness) - habit$happiness[1]))
data_habituation <-append(data_habituation, coef(lm(habit$happiness ~ habit$date, data = habit))[2])
}
hedonometer_data <- data.frame(data_language, data_baseline_mean, data_baseline_sd, data_reactivity, data_habituation)
install.packages("rjson")
library("rjson")
source("code/JSON_handler.R")
languages_iso2 <- c("en", "de", "ru", "es", "pt", "fr", "ar", "id", "ko")
data_hedon_total <- list()
for (l in languages_iso2) {
habit_json_data <- fromJSON(file = capture.output(cat("http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=",
l, "_all&date__gte=2022-02-24&limit=1000", sep = "")))
base_json_data <- fromJSON(file = capture.output(cat("http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=",
l, "_all&date__gte=2022-01-24&limit=31", sep = "")))
base_data <- function.createHedonDataFrame(base_json_data)
habit_data <- function.createHedonDataFrame(habit_json_data)
data_hedon_total[[length(data_hedon_total)+1]] <- list(l, base_data, habit_data)
}
#creating final data frame
data_language <- c()
data_baseline_mean <- c()
data_baseline_sd <- c()
data_reactivity <- c()
data_habituation <- c()
for (d in data_hedon_total) {
language <- d[[1]]
base <- d[[2]]
habit <- d[[3]]
data_language <- append(data_language, language)
data_baseline_mean <- append(data_baseline_mean, mean(base$happiness))
data_baseline_sd <- append(data_baseline_sd, sd(base$happiness))
data_reactivity <- append(data_reactivity, (mean(base$happiness) - habit$happiness[1]))
data_habituation <-append(data_habituation, coef(lm(habit$happiness ~ habit$date, data = habit))[2])
}
hedonometer_data <- data.frame(data_language, data_baseline_mean, data_baseline_sd, data_reactivity, data_habituation)
hedonometer_data
plot_de_habit
library("rmarkdown")
render_site
render_site()
install.packages("lemon")
library("lemon")
head(hedonometer_data)
render_site()
knit_print.data.frame <- lemon_print
render_site()
print(hedonometer_data)
render_site()
hedonometer_data
render_site()
languages_iso2 <- c("en", "de", "ru", "uk", "es", "pt", "fr", "ar", "id", "ko")
data_hedon_total <- list()
for (l in languages_iso2) {
habit_json_data <- fromJSON(file = capture.output(cat("http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=",
l, "_all&date__gte=2022-02-24&limit=1000", sep = "")))
base_json_data <- fromJSON(file = capture.output(cat("http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=",
l, "_all&date__gte=2022-01-24&limit=31", sep = "")))
base_data <- function.createHedonDataFrame(base_json_data)
habit_data <- function.createHedonDataFrame(habit_json_data)
data_hedon_total[[length(data_hedon_total)+1]] <- list(l, base_data, habit_data)
}
#creating final data frame
data_language <- c()
data_baseline_mean <- c()
data_baseline_sd <- c()
data_reactivity <- c()
data_habituation <- c()
for (d in data_hedon_total) {
language <- d[[1]]
base <- d[[2]]
habit <- d[[3]]
data_language <- append(data_language, language)
data_baseline_mean <- append(data_baseline_mean, mean(base$happiness))
data_baseline_sd <- append(data_baseline_sd, sd(base$happiness))
data_reactivity <- append(data_reactivity, (mean(base$happiness) - habit$happiness[1]))
data_habituation <-append(data_habituation, coef(lm(habit$happiness ~ habit$date, data = habit))[2])
}
hedonometer_data <- data.frame(data_language, data_baseline_mean, data_baseline_sd, data_reactivity, data_habituation)
hedonometer_data
render_site()
library("rmarkdown")
render_site()
library("rmarkdown")
render_site()
---
title: "Data Analytics Project"
description: |
Elea Bornand & Roman Alt
site: distill::distill_website
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
```
```{r results="asis"}
cat(readLines('text/home.txt'), sep = '\n')
```
# Results
At the moment we can show the development of happiness aswell as a Baseline Graph before the 24.2.2022 for German Twitter
Also we already have the processed Data from hedonometer.org, aswell as Language, Capital and Iso2 code for all relevant countries.
```{r echo=FALSE, eval=FALSE}
install.packages("rjson")
install.packages("ggplot2")
install.packages("lemon")
library("rjson")
library("lemon")
knit_print.data.frame <- lemon_print
source("code/JSON_handler.R")
source("code/plotter.R")
de_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-02-24&limit=1000")
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
cat(readLines('text/home.txt'), sep = '\n')
install.packages("rjson")
install.packages("ggplot2")
install.packages("lemon")
library("rjson")
library("lemon")
knit_print.data.frame <- lemon_print
source("code/JSON_handler.R")
source("code/plotter.R")
de_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-02-24&limit=1000")
de_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-01-24&limit=31")
data_de_habit <- function.createHedonDataFrame(de_habit_json)
data_de_base <- function.createHedonDataFrame(de_base_json)
#creating a plot for the german language
plot_de_habit <- function.basic_plot(data_de_habit)
install.packages("ggplot2")
install.packages("lemon")
hedonometer_data
head(countries_capitals_and_more, 6)
plot_de_habit
render_site()
library("rmarkdown")
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
knitr::opts_chunk$set(echo = FALSE)
render_site()
render_site()
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
cat(readLines('text/home.txt'), sep = '\n')
install.packages("rjson")
install.packages("ggplot2")
install.packages("lemon")
library("rjson")
library("lemon")
knit_print.data.frame <- lemon_print
source("code/JSON_handler.R")
source("code/plotter.R")
de_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-02-24&limit=1000")
install.packages("ggplot2")
de_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-01-24&limit=31")
data_de_habit <- function.createHedonDataFrame(de_habit_json)
data_de_base <- function.createHedonDataFrame(de_base_json)
#creating a plot for the german language
plot_de_habit <- function.basic_plot(data_de_habit)
hedonometer_data
head(countries_capitals_and_more, 6)
final_plot
knitr::opts_chunk$set(echo = FALSE)
render_site()
library("rmarkdown")
render_site()
render_site()
render_site()
library("rmarkdown")
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
final_plot
= data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black") +
geom_smooth(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400") +
geom_smooth(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E") +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
library("rjson")
library("ggplot2")
source("code/JSON_handler.R")
source("code/plotter.R")
final_plot <- ggplot() +
geom_smooth(data = data_de_habit, aes(x = data_de_habit$date, y = data_de_habit$happiness), color = "red") +
geom_smooth(data = data_en_habit, aes(x = data_en_habit$date, y = data_en_habit$happiness), color = "green") +
geom_smooth(data = data_es_habit, aes(x = data_es_habit$date, y = data_es_habit$happiness), color = "#2980B9") +
geom_smooth(data = data_ru_habit, aes(x = data_ru_habit$date, y = data_ru_habit$happiness), color = "blue") +
geom_smooth(data = data_uk_habit, aes(x = data_uk_habit$date, y = data_uk_habit$happiness), color = "yellow") +
geom_smooth(data = data_pt_habit, aes(x = data_pt_habit$date, y = data_pt_habit$happiness), color = "#F1C40F") +
geom_smooth(data = data_id_habit, aes(x = data_id_habit$date, y = data_id_habit$happiness), color = "#F39C12") +
geom_smooth(data = data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black") +
geom_smooth(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400") +
geom_smooth(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E") +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
# German
de_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-02-24&limit=30")
de_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2022-01-24&limit=31")
data_de_habit <- function.createHedonDataFrame(de_habit_json)
data_de_habit <- standardizeHedonData(data_de_habit, "de")
data_de_base <- function.createHedonDataFrame(de_base_json)
# English
en_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=en_all&date__gte=2022-02-24&limit=30")
en_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=en_all&date__gte=2022-01-24&limit=31")
data_en_habit <- function.createHedonDataFrame(en_habit_json)
data_en_habit <- standardizeHedonData(data_en_habit, "en")
data_en_base <- function.createHedonDataFrame(en_base_json)
# Russian
ru_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ru_all&date__gte=2022-02-24&limit=30")
ru_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ru_all&date__gte=2022-01-24&limit=31")
data_ru_habit <- function.createHedonDataFrame(ru_habit_json)
data_ru_habit <- standardizeHedonData(data_ru_habit, "ru")
data_ru_base <- function.createHedonDataFrame(ru_base_json)
# Ukrainian
uk_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=uk_all&date__gte=2022-02-24&limit=30")
uk_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=uk_all&date__gte=2022-01-24&limit=31")
data_uk_habit <- function.createHedonDataFrame(uk_habit_json)
data_uk_habit <- standardizeHedonData(data_uk_habit, "uk")
data_uk_base <- function.createHedonDataFrame(uk_base_json)
# Spanish
es_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=es_all&date__gte=2022-02-24&limit=30")
es_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=es_all&date__gte=2022-01-24&limit=31")
data_es_habit <- function.createHedonDataFrame(es_habit_json)
data_es_habit <- standardizeHedonData(data_es_habit, "es")
data_es_base <- function.createHedonDataFrame(es_base_json)
# Korean
ko_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ko_all&date__gte=2022-02-24&limit=30")
ko_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ko_all&date__gte=2022-01-24&limit=31")
data_ko_habit <- function.createHedonDataFrame(ko_habit_json)
data_ko_habit <- standardizeHedonData(data_ko_habit, "ko")
data_ko_base <- function.createHedonDataFrame(ko_base_json)
# Indonesian
id_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=id_all&date__gte=2022-02-24&limit=30")
id_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=id_all&date__gte=2022-01-24&limit=31")
data_id_habit <- function.createHedonDataFrame(id_habit_json)
data_id_habit <- standardizeHedonData(data_id_habit, "id")
data_id_base <- function.createHedonDataFrame(id_base_json)
# Portuguese
pt_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=pt_all&date__gte=2022-02-24&limit=30")
pt_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=pt_all&date__gte=2022-01-24&limit=31")
data_pt_habit <- function.createHedonDataFrame(pt_habit_json)
data_pt_habit <- standardizeHedonData(data_pt_habit, "pt")
data_pt_base <- function.createHedonDataFrame(pt_base_json)
# Arabic
ar_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ar_all&date__gte=2022-02-24&limit=30")
ar_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ar_all&date__gte=2022-01-24&limit=31")
data_ar_habit <- function.createHedonDataFrame(ar_habit_json)
data_ar_habit <- standardizeHedonData(data_ar_habit, "ar")
data_ar_base <- function.createHedonDataFrame(ar_base_json)
# French
fr_habit_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=fr_all&date__gte=2022-02-24&limit=30")
fr_base_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=fr_all&date__gte=2022-01-24&limit=31")
data_fr_habit <- function.createHedonDataFrame(fr_habit_json)
data_fr_habit <- standardizeHedonData(data_fr_habit, "fr")
data_fr_base <- function.createHedonDataFrame(fr_base_json)
standardizeHedonData <- function(hedon_data, lang) {
#first_day <- hedon_data[1, "happiness"]
for (i in 1:nrow(hedon_data)) {
hedon_data[i, "happiness"] <- hedon_data[i, "happiness"] - hedonometer_data[hedonometer_data$language == lang, ]$baseline_mean
}
return(hedon_data)
}
data_fr_habit <- standardizeHedonData(data_fr_habit, "fr")
data_ar_habit <- standardizeHedonData(data_ar_habit, "ar")
data_pt_habit <- standardizeHedonData(data_pt_habit, "pt")
data_id_habit <- standardizeHedonData(data_id_habit, "id")
data_ko_habit <- standardizeHedonData(data_ko_habit, "ko")
data_es_habit <- standardizeHedonData(data_es_habit, "es")
data_uk_habit <- standardizeHedonData(data_uk_habit, "uk")
data_ru_habit <- standardizeHedonData(data_ru_habit, "ru")
data_en_habit <- standardizeHedonData(data_en_habit, "en")
data_de_habit <- standardizeHedonData(data_de_habit, "de")
final_plot <- ggplot() +
geom_smooth(data = data_de_habit, aes(x = data_de_habit$date, y = data_de_habit$happiness), color = "red") +
geom_smooth(data = data_en_habit, aes(x = data_en_habit$date, y = data_en_habit$happiness), color = "green") +
geom_smooth(data = data_es_habit, aes(x = data_es_habit$date, y = data_es_habit$happiness), color = "#2980B9") +
geom_smooth(data = data_ru_habit, aes(x = data_ru_habit$date, y = data_ru_habit$happiness), color = "blue") +
geom_smooth(data = data_uk_habit, aes(x = data_uk_habit$date, y = data_uk_habit$happiness), color = "yellow") +
geom_smooth(data = data_pt_habit, aes(x = data_pt_habit$date, y = data_pt_habit$happiness), color = "#F1C40F") +
geom_smooth(data = data_id_habit, aes(x = data_id_habit$date, y = data_id_habit$happiness), color = "#F39C12") +
geom_smooth(data = data_fr_habit, aes(x = data_fr_habit$date, y = data_fr_habit$happiness), color = "black") +
geom_smooth(data = data_ko_habit, aes(x = data_ko_habit$date, y = data_ko_habit$happiness), color = "#D35400") +
geom_smooth(data = data_ar_habit, aes(x = data_ar_habit$date, y = data_ar_habit$happiness), color = "#34495E") +
xlab('Date') +
ylab('Happiness Score') +
labs(color="Languages")
final_plot
library(rmarkdown)
render_site()
library("rjson")
library("lemon")
knit_print.data.frame <- lemon_print
source("code/JSON_handler.R")
source("code/plotter.R")
render_site()
final_plot
