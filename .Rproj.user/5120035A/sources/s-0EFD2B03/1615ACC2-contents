---
title: "Data Analytics Project"
description: |
  Elea Bornand & Roman Alt
site: distill::distill_website
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)

# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html

```

# Introduction
some introductory stuff here :)

# Data
some Infos about our Data, where we got it from and how it is built. (different languages etc.)

# Method
how are we going to use that data. what variables are important, do we have a model to fit to the data etc.

# Results
At the moment we can show the development of happiness over time for three language-groups on Twitter, namely German, English and Russian.

```{r echo=FALSE, eval=FALSE}
install.packages("rjson")
install.packages("ggplot2")
library("rjson")
library("ggplot2")

de_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=de_all&date__gte=2021-08-24&limit=1000")
en_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=en_all&date__gte=2021-08-24&limit=1000")
ru_json <- fromJSON(file = "http://hedonometer.org/api/v1/happiness/?format=json&timeseries__title=ru_all&date__gte=2021-08-24&limit=1000")

# data_json contains two lists: meta and objects. we need to convert the objects-list into a nice dataframe
# we need to loop through the objects list. each element in data_json$objects contains another list with all the data for one day
# we create a vector for each variable
date <- c()
frequency <- c()
happiness <- c()
timeseries <- c()
# we loop through each element in data_json$objects and sort the parameters into their respective vector
for (i in de_json$objects) {
  date <- append(date, as.Date(i$date))
  frequency <- append(frequency, i$frequency)
  happiness <- append(happiness, as.double(i$happiness))
  timeseries <- append(timeseries, i$timeseries)
}
#creating the english language data frame
data_de <- data.frame(date = date, frequency = frequency, happiness = happiness, timeseries = timeseries)

date <- c()
frequency <- c()
happiness <- c()
timeseries <- c()

for (i in en_json$objects) {
  date <- append(date, as.Date(i$date))
  frequency <- append(frequency, i$frequency)
  happiness <- append(happiness, as.double(i$happiness))
  timeseries <- append(timeseries, i$timeseries)
}
#creating the german language data frame
data_en <- data.frame(date = date, frequency = frequency, happiness = happiness, timeseries = timeseries)

date <- c()
frequency <- c()
happiness <- c()
timeseries <- c()

for (i in ru_json$objects) {
  date <- append(date, as.Date(i$date))
  frequency <- append(frequency, i$frequency)
  happiness <- append(happiness, as.double(i$happiness))
  timeseries <- append(timeseries, i$timeseries)
}
#creating the russian language data frame
data_ru <- data.frame(date = date, frequency = frequency, happiness = happiness, timeseries = timeseries)

#creating a plot for the german language
plot_de <- ggplot(data_de, aes(x = date, y = happiness, group = 1)) +
  geom_line() +
  geom_point() +
  geom_smooth() +
  theme_light()

#creating a plot for the english language
plot_en <- ggplot(data_en, aes(x = date, y = happiness, group = 1)) +
  geom_line() +
  geom_point() +
  geom_smooth() +
  theme_light()

#creating a plot for the english language
plot_ru <- ggplot(data_ru, aes(x = date, y = happiness, group = 1)) +
  geom_line() +
  geom_point() +
  geom_smooth() +
  theme_light()
```

### Development of Happiness over Time for german Twitter:

```{r}
plot_de

```

### Development of Happiness over Time for english Twitter:

```{r}
plot_en

```

### Development of Happiness over Time for russian Twitter:

```{r}
plot_ru

```
